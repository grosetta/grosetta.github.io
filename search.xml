<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gromacs副本交换分子动力学模拟</title>
    <url>/2022/06/07/REMD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>…</p>
<span id="more"></span>




<blockquote>
<p>REMD(副本交换分子动力学)是一种增强采样方法，其在不同温度下对具有相似势能的体系进行采样。通过这种方法，可以增加体系跳出势能面势阱的可能性，从而达到探索新的构象空间的目的。</p>
</blockquote>
<p><img src="/2022/06/07/REMD/fig1.png#pic_center"></p>
<blockquote>
<p>一般来说某一温度下蛋白模拟构象分布满足正态分布规律。如上图所示，展示了同一体系在不同温度下的分布情况，横坐标表示模拟过程中出现的构象，纵坐标表示某一构象存在的丰度。对于体系1（绿色）而言，能达到虚线区域内构象的概率比较小，需要延长模拟时间才能提高这个区域构象出现的次数，若模拟时间不充分甚至有可能采样不到该区域的构象。而对于体系2（红色）而言，却很容易达到蓝色虚线之间的构象，如果在模拟过程中体系1与体系2在这个区间进行了构象交换，那么就可以弥补体系1采样不足的问题。</p>
</blockquote>
<p>以上个人愚见，仅供参考！</p>
<p>Gromacs 中实现的方式：</p>
<p>注意：只有单线程 gromacs 不支持 REMD，需要多线程编译版本。安装过程和之前的教程相差无几，只是需要额外安装 openmpi，并在最后 gromacs 编译步骤增加一个选项<code>-DGMX_MPI=ON</code> 即可。编译完成并安装后，执行<code>gmx_mpi</code>可以正常调用。</p>
<ol>
<li>确定所选模拟体系温度变化范围，温度变化梯度；</li>
<li>每一个温度下分别进行预平衡（NVT/NPT），每个温度下的预平衡称为一个副本/或系综。在这些副本进行预平衡之前共同都要进行相同的步骤：包括建模、能量最小化。</li>
<li>以每个副本预平衡后的终构象作为起始分别开始对应温度下的成品模拟。</li>
</ol>
<p>实现上述过程并不复杂，我为大家提供了运行脚本：</p>
<p>关注公众号:<font color="#DC143C">grosetta</font>, 后台回复“<font color="#000066">REMD</font>”自取（以溶菌酶模拟为例）</p>
<h3 id="1、模型构建-EM"><a href="#1、模型构建-EM" class="headerlink" title="1、模型构建+EM"></a>1、模型构建+EM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> REMD</span><br><span class="line">chmod 777 run.sh</span><br><span class="line">./run.sh             </span><br></pre></td></tr></table></figure>
<p>运行完后，在主文件夹中会出现模拟后的文件（后面不需要的都自动删除了），文件1EM.gro及topol.top是必须存在的。</p>
<p>用编辑器打开1EM.gro及topol.top查看蛋白总原子数及水总分子数。</p>
<h3 id="2、副本温度取值确定"><a href="#2、副本温度取值确定" class="headerlink" title="2、副本温度取值确定"></a>2、副本温度取值确定</h3><p>打开网址：<br>(<font color="#000066"><a href="http://virtualchemistry.org/remd-temperature-generator/">http://virtualchemistry.org/remd-temperature-generator/</a></font>)(<a href="http://virtualchemistry.org/remd-temperature-generator/">http://virtualchemistry.org/remd-temperature-generator/</a>)</p>
<p><img src="/2022/06/07/REMD/fig2.png#pic_center" alt="主页面"></p>
<p>其中：</p>
<ul>
<li>Exchange probability（副本交换频率）可根据需求自行调整；</li>
<li>Lower temperature limit 设定温度区间下限（单位K）；</li>
<li>Number of water molecules 体系总的水分子数；</li>
<li>Number of protein atoms 体系蛋白总原子数；</li>
<li>Upper temperature limit 设定温度区间上限(单位K)；</li>
<li>Constraints in water 水分子模型是柔性水还是刚性水，一般选刚性水；</li>
<li>Constraints in the protein 选择只对氢原子的键进行束缚；</li>
</ul>
<p>其余各项保持默认即可。</p>
<p>点击submit提交，返回程序推荐的各副本模拟温度取值（需要注意的是该程序针对oplsaa力场发展而来，对于应用其他力场的体系，如AMBER、GROMOS,则多少存在些偏差）。</p>
<p><img src="/2022/06/07/REMD/fig3.png#pic_center" alt="推荐温度取值"></p>
<p>复制红框内的数据以备后用。</p>
<h3 id="3、多副本预平衡模拟"><a href="#3、多副本预平衡模拟" class="headerlink" title="3、多副本预平衡模拟"></a>3、多副本预平衡模拟</h3><p>在REMD文件夹一级目录下打开终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 step1.sh</span><br><span class="line">./step1.sh</span><br></pre></td></tr></table></figure>

<p>step1.sh脚本内容如下（第一行的温度数据就是上一步复制结果，替换成你的即可）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">T=<span class="string">&quot;298.15, 299.47, 300.78, 302.11, 303.44, 304.77, 306.11, 307.47, 308.82, 310.00&quot;</span></span><br><span class="line">arr_T=(<span class="variable">$&#123;T//,/ &#125;</span>)  <span class="comment">#温度数据转为数组</span></span><br><span class="line">len=<span class="variable">$&#123;#arr_T[@]&#125;</span>   <span class="comment">#统计数组元素个数</span></span><br><span class="line"></span><br><span class="line">rm -r ./step1/equ* &gt; /dev/null 2&gt;&amp;1  <span class="comment">#删除step1路径下的残存文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;=<span class="variable">$len</span>-1; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	mkdir ./step1/equ_<span class="variable">$&#123;i&#125;</span></span><br><span class="line">	cp ./step1/mdp_file/* ./step1/equ_<span class="variable">$&#123;i&#125;</span>/.</span><br><span class="line">	sed -i <span class="string">&#x27;s/TEMP/&#x27;</span><span class="variable">$&#123;arr_T[$i]&#125;</span><span class="string">&#x27;/g&#x27;</span> ./step1/equ_<span class="variable">$&#123;i&#125;</span>/*.mdp</span><br><span class="line">	<span class="comment">#预平衡</span></span><br><span class="line">	gmx_mpi grompp -f ./step1/equ_<span class="variable">$&#123;i&#125;</span>/PR.mdp -c 1EM.gro -r 1EM.gro -p topol.top -o ./step1/equ_<span class="variable">$&#123;i&#125;</span>/2PR.tpr -maxwarn 99</span><br><span class="line">	gmx_mpi mdrun -deffnm ./step1/equ_<span class="variable">$&#123;i&#125;</span>/2PR -v</span><br><span class="line">	<span class="comment">#NVT</span></span><br><span class="line">	gmx_mpi grompp -f ./step1/equ_<span class="variable">$&#123;i&#125;</span>/NVT.mdp -c ./step1/equ_<span class="variable">$&#123;i&#125;</span>/2PR.gro -p topol.top -o ./step1/equ_<span class="variable">$&#123;i&#125;</span>/3NVT.tpr -maxwarn 99</span><br><span class="line">	gmx_mpi mdrun -deffnm ./step1/equ_<span class="variable">$&#123;i&#125;</span>/3NVT -v</span><br><span class="line">	<span class="comment">#NPT</span></span><br><span class="line">	gmx_mpi grompp -f ./step1/equ_<span class="variable">$&#123;i&#125;</span>/NPT.mdp -c ./step1/equ_<span class="variable">$&#123;i&#125;</span>/3NVT.gro -p topol.top -o ./step1/equ_<span class="variable">$&#123;i&#125;</span>/4NPT.tpr -maxwarn 99</span><br><span class="line">	gmx_mpi mdrun -deffnm ./step1/equ_<span class="variable">$&#123;i&#125;</span>/4NPT -v</span><br><span class="line">	<span class="comment">#删除中间文件</span></span><br><span class="line">	rm -f ./step1/equ_<span class="variable">$&#123;i&#125;</span>/*.trr ./step1/equ_<span class="variable">$&#123;i&#125;</span>/*.edr ./step1/equ_<span class="variable">$&#123;i&#125;</span>/*tpr ./step1/equ_<span class="variable">$&#123;i&#125;</span>/*.<span class="built_in">log</span> ./step1/equ_<span class="variable">$&#123;i&#125;</span>/*.xtc ./step1/equ_<span class="variable">$&#123;i&#125;</span>/\<span class="comment">#* &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>此步的mdp模板文件存在路径为<code>step1/mdp_file</code>,可以根据自己需求修改步长、总步数、输出频率等各类参数（注意和温度数值相关参数一概不要修改，脚本可代劳。此外该路径下的模板文件不能删除）。</p>
<h3 id="4、成品模拟（副本交换）"><a href="#4、成品模拟（副本交换）" class="headerlink" title="4、成品模拟（副本交换）"></a>4、成品模拟（副本交换）</h3><p>同样是在REMD文件夹一级目录下打开终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 step2.sh</span><br><span class="line">./step2.sh</span><br></pre></td></tr></table></figure>

<p>step2.sh脚本内容如下（同样只需要替换第一行的温度数据，和上一步一样）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">T=<span class="string">&quot;298.15, 299.47, 300.78, 302.11, 303.44, 304.77, 306.11, 307.47, 308.82, 310.00&quot;</span></span><br><span class="line">arr_T=(<span class="variable">$&#123;T//,/ &#125;</span>)  <span class="comment">#温度数据转为数组</span></span><br><span class="line">len=<span class="variable">$&#123;#arr_T[@]&#125;</span>   <span class="comment">#统计数组元素个数</span></span><br><span class="line">mid=<span class="variable">$&#123;len&#125;</span>-1</span><br><span class="line"></span><br><span class="line">rm -r ./step2/MD* &gt; /dev/null 2&gt;&amp;1  <span class="comment">#删除step2路径下的残存文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;=<span class="variable">$mid</span>; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	mkdir ./step2/MD_<span class="variable">$&#123;i&#125;</span></span><br><span class="line">	cp ./step2/mdp_file/* ./step2/MD_<span class="variable">$&#123;i&#125;</span>/.</span><br><span class="line">	cp ./step1/equ_<span class="variable">$&#123;i&#125;</span>/4*.gro ./step2/MD_<span class="variable">$&#123;i&#125;</span>/.</span><br><span class="line">	sed -i <span class="string">&#x27;s/TEMP/&#x27;</span><span class="variable">$&#123;arr_T[$i]&#125;</span><span class="string">&#x27;/g&#x27;</span> ./step2/MD_<span class="variable">$&#123;i&#125;</span>/*.mdp</span><br><span class="line">	<span class="comment">#成品模拟tpr文件生成</span></span><br><span class="line">	gmx_mpi grompp -f ./step2/MD_<span class="variable">$&#123;i&#125;</span>/md.mdp -c ./step1/equ_<span class="variable">$&#123;i&#125;</span>/4NPT.gro -p topol.top -o ./step2/MD_<span class="variable">$&#123;i&#125;</span>/5MD.tpr</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行交换模拟</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mpirun -np 8 gmx_mpi mdrun -deffnm 5MD -multidir ./step2/MD_[12345678] -replex 1000</span><br></pre></td></tr></table></figure>

<ul>
<li>-np  表示调用cpu核心数</li>
<li>[] 内的数字表示副本所在文件夹名称的后缀数字，我们创建了10个副本，对应文件夹的后缀名是0，1，2，3，4，5，6，7，8，9 但由于cpu个数应该是副本个数整数倍，我是在笔记本上的wsl中进行的测试，只有八个核心，所以最多只能进行8个副本的交换，我选的这八个副本的文件夹后缀序号是1-8，对应在中括号内需要将数字补齐，即12345678</li>
<li>replex 表示副本模拟多少步进行一次交换，蛋白体系一般需要至少间隔1ps（在步长为2fs情况下，即运行500步）再交换。</li>
</ul>
<blockquote>
<p>由于进行模拟的每个副本在模拟过程中进行了构象交换，所以各自在时间上就不是连续的，可以用gromacs自带脚本进行整合，命令如下：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">demux.pl ./step2/MD_1/5MD.log</span><br><span class="line">gmx_mpi trjcat -f ./step2/MD_[12345678]/5MD.xtc -demux replica_index.xvg -o ./traj_merge/&#123;1..8&#125;_traj.xtc</span><br></pre></td></tr></table></figure>

<p>最后整合好的轨迹输出到了traj_merge文件夹内。<br>整合后的轨迹只代表单一温度下的轨迹</p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>gromacs</tag>
      </tags>
  </entry>
  <entry>
    <title>Pubmed爬取文献</title>
    <url>/2022/06/07/pubmed%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>…</p>
<span id="more"></span>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> requests.cookies</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">search_text = <span class="string">&#x27;prmt5&#x27;</span>        <span class="comment">#定义搜索关键字</span></span><br><span class="line">page = <span class="number">4</span>                     <span class="comment">#爬取文献总页数，必须大于2</span></span><br><span class="line">cookie_path = <span class="string">&#x27;cookie.txt&#x27;</span>   <span class="comment">#cookie文件路径</span></span><br><span class="line">interval1 = <span class="number">3</span>                <span class="comment">#第一步爬取时间间隔（秒），建议大于1</span></span><br><span class="line">interval2 = <span class="number">1.5</span>              <span class="comment">#第二步爬取时间间隔（秒），建议大于1</span></span><br><span class="line">outfile = <span class="string">&#x27;test.csv&#x27;</span>         <span class="comment">#结果输出文件（必须是csv后缀）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#代码主体</span></span><br><span class="line">cookie_jar = requests.cookies.RequestsCookieJar()</span><br><span class="line">headers = [&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows x86; rv:19.0) Gecko/20100101 Firefox/19.0&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 4.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Microsoft Windows NT 6.2.9200.0); rv:22.0) Gecko/20130405 Firefox/22.0&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.17 Safari/537.36&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1468.0 Safari/537.36&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(cookie_path) <span class="keyword">as</span> fin:</span><br><span class="line">    cookiejson = json.loads(fin.read())</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookiejson:</span><br><span class="line">        cookie_jar.<span class="built_in">set</span>(</span><br><span class="line">            name=cookie[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">            value=cookie[<span class="string">&quot;value&quot;</span>],</span><br><span class="line">            domain=cookie[<span class="string">&quot;domain&quot;</span>],</span><br><span class="line">            path=cookie[<span class="string">&quot;path&quot;</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">htmls = []</span><br><span class="line">first_url = <span class="string">&quot;https://pubmed.ncbi.nlm.nih.gov/?term=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(search_text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前爬取：第1页&quot;</span>)</span><br><span class="line">r = requests.get(first_url, cookies=cookie_jar)</span><br><span class="line">r.encoding=<span class="string">&#x27;ISO/IEC 8859-1&#x27;</span></span><br><span class="line">htmls.append(r.text)</span><br><span class="line">url = <span class="string">&quot;https://pubmed.ncbi.nlm.nih.gov/?term=&#123;search_text&#125;&amp;page=&#123;idx&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,page):</span><br><span class="line">    time.sleep(random.random()+interval1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前爬取：第%d页&quot;</span> % idx)</span><br><span class="line">    r = requests.get(url.<span class="built_in">format</span>(search_text=search_text, idx=idx), cookies=cookie_jar, headers=random.choice(headers))</span><br><span class="line">    r.encoding=<span class="string">&#x27;ISO/IEC 8859-1&#x27;</span></span><br><span class="line">    htmls.append(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result=[[<span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;Year&#x27;</span>, <span class="string">&#x27;Journal&#x27;</span>, <span class="string">&#x27;DOI&#x27;</span>, <span class="string">&#x27;PMID&#x27;</span>, <span class="string">&#x27;Abatract&#x27;</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,page-<span class="number">1</span>):</span><br><span class="line">    j = i+<span class="number">1</span></span><br><span class="line">    soup=BeautifulSoup(htmls[<span class="built_in">int</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))], <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前解析页面&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(j))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;article&#x27;</span>, <span class="string">&#x27;full-docsum&#x27;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            title = <span class="built_in">str</span>(item.find(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;docsum-title&#x27;</span>).text)    <span class="comment">#需要将解析的内容转为字符串的形式</span></span><br><span class="line">            title = title.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            title = title.replace(<span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            title = title.replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            title = title.replace(<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            title = title.replace(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            context = <span class="built_in">str</span>(item.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;docsum-journal-citation full-journal-citation&#x27;</span>).text)</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">&#x27;[^\s];[^\s]&#x27;</span>, context):</span><br><span class="line">                context_list = context.split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">                year = <span class="built_in">str</span>(context_list[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                Journal = <span class="built_in">str</span>(context_list[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                DOI = <span class="built_in">str</span>(context_list[<span class="number">1</span>]).split(<span class="string">&#x27;. &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;: &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                year = <span class="string">&#x27;None&#x27;</span></span><br><span class="line">                Journal = <span class="string">&#x27;None&#x27;</span></span><br><span class="line">                DOI = <span class="string">&#x27;None&#x27;</span></span><br><span class="line">            PMID = <span class="built_in">str</span>(item.find(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;docsum-pmid&#x27;</span>).text)</span><br><span class="line">            second_url = <span class="string">&quot;https://pubmed.ncbi.nlm.nih.gov/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(PMID)</span><br><span class="line">            r2 = requests.get(second_url, cookies=cookie_jar, headers=random.choice(headers))</span><br><span class="line">            r2.encoding=<span class="string">&#x27;ISO/IEC 8859-1&#x27;</span></span><br><span class="line">            soup2 = BeautifulSoup(r2.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            Abstract = <span class="built_in">str</span>(soup2.find(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;abstract-content selected&#x27;</span>).p.text) </span><br><span class="line">            Abstract = Abstract.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            Abstract = Abstract.replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            final = [title, year, Journal, DOI, PMID, Abstract]</span><br><span class="line">            result.append(final)</span><br><span class="line">            time.sleep(random.random()+interval2)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment">#title = &#x27;None&#x27;</span></span><br><span class="line">            <span class="comment">#year = &#x27;None&#x27;</span></span><br><span class="line">            <span class="comment">#Journal = &#x27;None&#x27;</span></span><br><span class="line">            <span class="comment">#DOI = &#x27;None&#x27;</span></span><br><span class="line">            <span class="comment">#PMID = &#x27;None&#x27;</span></span><br><span class="line">            Abstract = <span class="string">&#x27;None&#x27;</span></span><br><span class="line">            final = [title, year, Journal, DOI, PMID, Abstract]</span><br><span class="line">            result.append(final)</span><br><span class="line">            </span><br><span class="line"><span class="comment">#print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(outfile, <span class="string">&quot;a&quot;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        writer = csv.writer(file ,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        writer.writerows(result)</span><br></pre></td></tr></table></figure>


<blockquote>
<ul>
<li>脚本中用到的<code>cookie</code>文件可以通过浏览器插件获取。 </li>
<li>插件名：Cookie Editor</li>
<li>使用方法：打开pubmed官网，点击Cookie Editor图标（如下图所示），复制cookie内容，粘贴到一个.txt文本文件内。</li>
</ul>
</blockquote>
<p><img src="/2022/06/07/pubmed%E7%88%AC%E8%99%AB/fig1.png#pic_center"></p>
<ul>
<li><a href="pub-crawler_setup.exe"><font color="#DC143C">下载链接</font></a></li>
<li>安装：双击<code>pub-crawler_setup.exe</code>常规安装即可；</li>
<li>运行：</li>
</ul>
<p><img src="/2022/06/07/pubmed%E7%88%AC%E8%99%AB/fig2.png#pic_center" alt="运行页面1"></p>
<p><img src="/2022/06/07/pubmed%E7%88%AC%E8%99%AB/fig3.png#pic_center" alt="运行页面2"></p>
<p>上图页面运行时会一直这样保持，待输出文件出现时，可手动点击右上角红叉关闭。</p>
<p><img src="/2022/06/07/pubmed%E7%88%AC%E8%99%AB/fig4.png#pic_center" alt="输出结果展示"></p>
<p>如果和Quicker软件（这款软件真心方便，用了四年了，常用操作均可以一键直达）搭配使用会更方便。</p>
<p><img src="/2022/06/07/pubmed%E7%88%AC%E8%99%AB/fig5.gif#pic_center" alt="和Quicker搭配使用"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>恒定pH条件下的分子动力学模拟</title>
    <url>/2022/04/30/CPHMD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>…</p>
<span id="more"></span>


<blockquote>
<p>自然界中往往存在一些对PH值敏感的蛋白，当我们想要探究这些蛋白在不同PH条件下构象变化时自然离不开MD的辅助。遗憾的是Gromacs暂不支持恒定PH条件下的模拟，因为这涉及到了蛋白表面残基质子化状态需要时刻改变。一种折衷的方法是：用<code>propka</code>等预测工具预测蛋白极性/可质子化残基的pka值（因为实际蛋白表面的pka值可能受到邻近残基的影响而发生偏移），然后根据想要模拟的PH环境，自主确定各个可质子化残基质子化状态（比如某个残基pKa=4，pH环境为7，那么这个残基自然是处于离去质子的解离状态）。然后修改对应pdb文件中的残基名，比如脱去质子的CYS改名为CYM（这个问题文末有提及）。这种方法存在的最大缺点在于：质子化状态一但设定好就会一成不变，这和实际情况显然是不符的。因此我们今天不介绍这种方法，而是介绍在Amber中的实现方法。<br><strong>示例文件关注公众号“grosetta”,后台回复”<font color="#0000FF">ph</font>“自取</strong>。</p>
</blockquote>
<h2 id="1-准备结构"><a href="#1-准备结构" class="headerlink" title="1. 准备结构"></a>1. 准备结构</h2><blockquote>
<p>有这样一张表(下图所示)，罗列了常见质子化残基，包括<code>ASP、GLU、HIS、CYS、LYS、TYR</code>. 第三列数据对应它们各自的pKa值。第二列对应它们在恒定PH环境模拟时Amber识别的名字，如果想让Amber在模拟时对某个残基上面的质子化状态”多多关照”,总得披上”马甲”好让Amber认识它吧。比如我想要模拟PH=7的环境，查看下表可以看出<code>ASP、GLU、HIS</code>在此条件下质子会发生解离，那么就把pdb文件中它们的名称改成对应的”马甲”。<code>ASP</code>→<code>AS4</code>、<code>GLU</code>→<code>GL4</code>、<code>HIS</code>→<code>HIP</code></p>
</blockquote>
<p><img src="/2022/04/30/CPHMD/fig1.png#pic_center"></p>
<p>本次就以11个氨基酸长度的小肽<code>test.pdb</code>在pH为7的环境下模拟为例：</p>
<h3 id="第一步，修改pdb文件"><a href="#第一步，修改pdb文件" class="headerlink" title="第一步，修改pdb文件"></a>第一步，修改pdb文件</h3><blockquote>
<p>首先修改需要更换“马甲”的残基名，这里我们做了<code>ASP</code>→<code>AS4</code>、<code>GLU</code>→<code>GL4</code>修改，由于没有HIS残基，所以就不做考虑。此外该分子种有两个距离较靠近的CYS，我们想让他们之间成二硫键，所以修改做出修改：<code>CYS</code>→<code>CYX</code>。修改后的文件名为<code>test_fix.pdb</code></p>
</blockquote>
<p><img src="/2022/04/30/CPHMD/fig2.png#pic_center" alt="ASP→AS4名称更换示意"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用pdb4amber不加氢，补全缺失原子，连接二硫键</span></span><br><span class="line">pdb4amber -i test_fix.pdb --nohyd -o test_fix2.pdb</span><br><span class="line"><span class="comment">#不知道什么原因pdb4amber除氢总是失败，只能用下条命令自行除去了</span></span><br><span class="line">grep -v <span class="string">&#x27;.............H&#x27;</span> test_fix2.pdb &gt; test_fix3.pdb</span><br></pre></td></tr></table></figure>
<p>下图所示，我们想要连接的二硫键并没有形成，什么原因呢？这是因为只有硫原子间距小于2.5Å时<code>pdb4amber</code>才会自动连接。不过也没关系，后面我们还能在构建拓扑时强制将它们连上。</p>
<p><img src="/2022/04/30/CPHMD/fig3.png#pic_center"></p>
<h3 id="第二步，构建拓扑"><a href="#第二步，构建拓扑" class="headerlink" title="第二步，构建拓扑"></a>第二步，构建拓扑</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#唤醒tleap程序</span></span><br><span class="line">tleap</span><br><span class="line"><span class="comment">#加载constph力场（底层用的amber_ff10力场，同时于蛋白而言等价于ff99SB）</span></span><br><span class="line"><span class="built_in">source</span> leaprc.constph</span><br><span class="line"><span class="built_in">source</span> leaprc.water.tip3p  <span class="comment">#为后面的抗衡离子添加力场</span></span><br><span class="line"><span class="comment">#加载修改好的pdb</span></span><br><span class="line">mol = loadPDB test_fix3.pdb</span><br><span class="line"><span class="comment">#连接二硫键</span></span><br><span class="line"><span class="comment">#遵循语法bond &lt;原子1&gt; &lt;原子2&gt; [bondtype]</span></span><br><span class="line"><span class="comment">#bondtype分三类：“-”单键、“=”双键、“#”三键、“:”芳香键,若不指定则默认是单键</span></span><br><span class="line">bond mol.4.SG mol.8.SG </span><br><span class="line"><span class="comment">#维持体系电中性</span></span><br><span class="line">addions mol Cl- 0</span><br><span class="line">addions mol Na+ 0</span><br><span class="line"><span class="comment">#保存拓扑、坐标</span></span><br><span class="line">saveAmberParm mol test.prmtop test.inpcrd</span><br><span class="line"><span class="comment">#退出tleap程序</span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，这里我们构建拓扑时没有添加水分子，这是因为本例要使用的是’隐式水‘模型。’隐式水‘不是真正的水分子，你可以把它理解为一个个数据点。启用’隐式水‘模型的参数为<code>icnstph=1</code>,需要将它添加到后文用到的以<code>*.in</code>为后缀的文件中。</p>
</blockquote>
<h3 id="第三步，准备恒定pH输入文件-cpin-file"><a href="#第三步，准备恒定pH输入文件-cpin-file" class="headerlink" title="第三步，准备恒定pH输入文件(cpin file)"></a>第三步，准备恒定pH输入文件(cpin file)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为本例中我们只考虑了GLU、ASP的质子化状态改变，所以resname后面的参数改为它们对应的&#x27;马甲&#x27;——GL4、AS4</span></span><br><span class="line">cpinutil.py -resnames GL4 AS4 -p test.prmtop -o test.cpin</span><br></pre></td></tr></table></figure>

<h2 id="2-模拟"><a href="#2-模拟" class="headerlink" title="2.模拟"></a>2.模拟</h2><h3 id="第一步，EM"><a href="#第一步，EM" class="headerlink" title="第一步，EM"></a>第一步，EM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#em.in文件在分享文件中的em文件夹内</span></span><br><span class="line">pmemd -O -i em/em.in -p test.prmtop -c test.inpcrd -o em/test_min.mdout -r em/test_min.rst -ref test.inpcrd -cpin test.cpin -inf em/em_mdinfo</span><br></pre></td></tr></table></figure>

<h3 id="第二步，体系加热"><a href="#第二步，体系加热" class="headerlink" title="第二步，体系加热"></a>第二步，体系加热</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#heat.in文件在分享文件中的heat文件夹内</span></span><br><span class="line">pmemd -O -i heat/heat.in -p test.prmtop -c em/test_min.rst -o heat/test_heat.mdout -r heat/test_heat.rst -ref em/test_min.rst -cpin test.cpin -inf heat/heat_mdinfo</span><br></pre></td></tr></table></figure>

<h3 id="第三步，预平衡"><a href="#第三步，预平衡" class="headerlink" title="第三步，预平衡"></a>第三步，预平衡</h3><blockquote>
<ul>
<li>这一步<code>*in</code>文件里需要添加或调整参数<code>solvph=</code>, <code>ntcnstph=</code>。</li>
<li><code>solvph=</code>设定体系pH值，<code>ntcnstph=</code> 设置每隔多少步监测一次所选残基质子化状态。要注意的是，amber每次只能监测一个残基的状态，也就是说所选“滴定残基”(即需要质子化状态改变的残基）数越多，于单个残基而言监测间隔越长。这就需要我们进行适当取舍。amber官方举的例子：当选取滴定残基数为10时，监测步长设为5得到的结果比较好。可见即便amber可以模拟恒定pH条件，但这也是有限制的。本例中我们选取的滴定残基数总共就两个，所以<code>ntcnstph=</code>可以设得比较大，我设定为25。<em>（ps:后来才发现前面设置了三个“滴定残基”，不过影响应该不大）</em></li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pr.in文件在分享文件中的pr文件夹内</span></span><br><span class="line">pmemd -O -i pr/pr.in -p test.prmtop -c heat/test_heat.rst -o pr/test_pr.mdout -cpin test.cpin -r pr/test_pr.rst -cpout pr/test_pr.cpout -cprestrt pr/test_pr.cpin -inf pr/pr_mdinfo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本步输出的<code>test_pr.cpin</code>是<code>test.cpin</code>文件更新版。在预平衡中，“滴定残基”质子化状态发生了改变，所以需要将更新后的信息保存到新结果中，以供下一步成品模拟调用。  </p>
</blockquote>
<p><strong>无关紧要的内容</strong>👇👇👇</p>
<hr>
<p>如下图所示展示了Amber计算各种质子化状态之间的相对自由能差的原理。绿色区域的各种质子化状态的自由能在模拟过程中（t0）存入以<code>*cpin</code>为后缀的文件中。在当质子化状态又一次发生改变[下图红色区域]时(t0+Δt)依照下方公式即可计算出残基质子化前后自由能的变换。</p>
<p><img src="/2022/04/30/CPHMD/fig4.png#pic_center" alt="Amber计算各种质子化状态之间的相对自由能差 原理示意图"></p>
<hr>
<p><strong>无关紧要的内容</strong>👆👆👆</p>
<h3 id="第四步，成品模拟"><a href="#第四步，成品模拟" class="headerlink" title="第四步，成品模拟"></a>第四步，成品模拟</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#md.in文件在分享文件中的md文件夹内</span></span><br><span class="line">pmemd -O -i md/md.in -p test.prmtop -c pr/test_pr.rst -o md/test_md.mdout -cpin pr/test_pr.cpin -r md/test_md.rst -x md/test_md.nc -cpout md/test_md.cpout -cprestrt md/test_md.cpin -inf md/md_mdinfo</span><br></pre></td></tr></table></figure>

<h2 id="3-结果分析"><a href="#3-结果分析" class="headerlink" title="3.结果分析"></a>3.结果分析</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#结果输出到analyse文件夹内</span></span><br><span class="line">cphstats -i md/test_md.cpin md/test_md.cpout -o analyse/calcpka.dat --population analyse/populations.dat</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>calcpka.dat</code>文件中记录了每个滴定残基的预测pKa值及质子化存在时间比率等信息。本例由于运行时间很短，所以两个ASP质子化状态未改变，所以pKa没有预测值。</li>
<li><code>populations.dat</code>文件记录了每个残基各种质子化状态及相应状态数量占比。</li>
</ul>
</blockquote>
<p>除此之外，你也可以按照常规步骤分析其他的性质，比如构象变化、主成分、自由能等。</p>
<h2 id="写在最后-👇👇👇"><a href="#写在最后-👇👇👇" class="headerlink" title="写在最后 👇👇👇"></a><strong>写在最后</strong> 👇👇👇</h2><hr>
<p>::: block-1</p>
<ul>
<li>关于残基的”马甲”</li>
</ul>
<blockquote>
<p>在Amber中，对于一些标准残基的特殊状态，我们往往用另一种名字替代。这样Amber才能识别，并施加适当的力场参数。大体有如下几种情况： </p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">原残基名</th>
<th align="center">“马甲”</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CYS</td>
<td align="center">CYX</td>
<td align="left">半胱氨酸成二硫键</td>
</tr>
<tr>
<td align="center">CYS</td>
<td align="center">CYM</td>
<td align="left">半胱氨酸和金属螯合/或用于恒定pH模拟的滴定碱基</td>
</tr>
<tr>
<td align="center">HIS</td>
<td align="center">HIE</td>
<td align="left">见下图描述</td>
</tr>
<tr>
<td align="center">HIS</td>
<td align="center">HID</td>
<td align="left">见下图描述</td>
</tr>
<tr>
<td align="center">HIS</td>
<td align="center">HIP</td>
<td align="left">见下图描述/同时用于恒定pH模拟的滴定碱基</td>
</tr>
<tr>
<td align="center">ASP</td>
<td align="center">AS4</td>
<td align="left">可用于恒定pH模拟的滴定碱基</td>
</tr>
<tr>
<td align="center">GLU</td>
<td align="center">GL4</td>
<td align="left">可用于恒定pH模拟的滴定碱基</td>
</tr>
</tbody></table>
<p>:::</p>
<p><img src="/2022/04/30/CPHMD/fig5.png#pic_center"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>amber</tag>
      </tags>
  </entry>
  <entry>
    <title>rutracker薅资本家羊毛</title>
    <url>/2022/03/13/rutracker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>…</p>
<span id="more"></span>

<blockquote>
<p>因为近期俄乌冲突，毛熊被制裁，于是放开了对本国最大的dao版网站rutracker的限制。上面各种po解软件。试了一下很多专业软件都能找到绿色版（这里不好提名字，你能想到的一般都有资源，只是可能版本号是较早的）</p>
</blockquote>
<h2 id="给chrome或edge浏览器安装rutracker访问插件"><a href="#给chrome或edge浏览器安装rutracker访问插件" class="headerlink" title="给chrome或edge浏览器安装rutracker访问插件"></a>给chrome或edge浏览器安装rutracker访问插件</h2><p><a href="rutracker.zip"><font color="#DC143C">下载链接</font></a>在这<br>怎么给浏览器安装插件自行百度，很容易。</p>
<h2 id="借助必应搜索引擎搜索rutracker站内资源"><a href="#借助必应搜索引擎搜索rutracker站内资源" class="headerlink" title="借助必应搜索引擎搜索rutracker站内资源"></a>借助必应搜索引擎搜索rutracker站内资源</h2><blockquote>
<p>rutracker想要搜索站内资源必须注册登录，不知什么原因rutracker现在不能注册新用户，无奈只能借助必应搜索引擎了。<br>搜索格式如下:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">搜索资源名 site:http://rutracker.org</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:搜索资源名与site之间有空格<br>搜索到的资源链接多数以bt种子的形式提供，迅雷下载即可。</p>
</blockquote>
<p><img src="/2022/03/13/rutracker/fig1.png#pic_center"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>软件下载</tag>
      </tags>
  </entry>
  <entry>
    <title>含非标准残基的多肽对接</title>
    <url>/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>对含有磷酸丝氨酸多肽的对接方法</p>
<span id="more"></span>

<blockquote>
<p>最近需要对接一个含非标准残基的多肽对接，一开始我以为多肽对接和常规小分子对接一样，可试了一下发现对接的结果是啥么玩意儿啊，完全不是我想要的样子。了解后才发现，常规的小分子对接程序面对多肽这样的大分子量体系准确度完全不能保证。那么能用蛋白蛋白对接程序吗？显然也不能。蛋白蛋白对接适用于两个单体蛋白结构已知的情况，而且这两个单体蛋白的三维结构相对“刚性”（这是其对接原理决定的）。几经寻找才发现多肽对接有其专属的一类程序——peptide docking.<br>找了几个相关程序后发现它们都只能对接天然氨基酸的多肽，而我的多肽恰巧有一个磷酸化修饰的残基。几经辗转终于找到了一个应对方案（ADFR组合flexpepdock）</p>
</blockquote>
<h2 id="ADFR对接只含天然残基的多肽"><a href="#ADFR对接只含天然残基的多肽" class="headerlink" title="ADFR对接只含天然残基的多肽"></a>ADFR对接只含天然残基的多肽</h2><p><a href="https://ccsb.scripps.edu/adfr/downloads/"><font color="#0000FF">下载链接</font></a></p>
<p>我的多肽中含磷酸丝氨酸，这一步姑且将磷酸丝氨酸视作常规丝氨酸。<br>我使用的windows版，安装过程无脑下一步就行了（最后一步选择学术用户，这样可以使用全功能）。安装好后，环境变量也自动设置好了，下文用到的命令，cmd中可直接调用。</p>
<h3 id="对受体蛋白和多肽质子化"><a href="#对受体蛋白和多肽质子化" class="headerlink" title="对受体蛋白和多肽质子化"></a>对受体蛋白和多肽质子化</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; reduce receptor.pdb &gt; receptor_H.pdb</span><br><span class="line">&gt; reduce peptide.pdb &gt; peptide_H.pdb</span><br></pre></td></tr></table></figure>

<h3 id="转为pdbqt格式"><a href="#转为pdbqt格式" class="headerlink" title="转为pdbqt格式"></a>转为pdbqt格式</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; prepare_receptor -r receptor_H.pdb</span><br><span class="line">&gt; prepare_ligand -l peptide_H.pdb</span><br></pre></td></tr></table></figure>

<h3 id="用图形化界面打开上一步生成的受体pdbqt文件"><a href="#用图形化界面打开上一步生成的受体pdbqt文件" class="headerlink" title="用图形化界面打开上一步生成的受体pdbqt文件"></a>用图形化界面打开上一步生成的受体pdbqt文件</h3><p><img src="/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/fig1.png#pic_center"><br><img src="/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/fig2.png#pic_center"><br><img src="/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/fig3.png#pic_center"></p>
<blockquote>
<p>红框中fills一列显示了所有预测的可能的结合位点，勾选你所认为的可能结合位点。</p>
</blockquote>
<p><img src="/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/fig4.png#pic_center"></p>
<blockquote>
<p>依据上述勾选的结合位点设置结合盒子</p>
</blockquote>
<p><img src="/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/fig5.png#pic_center"></p>
<blockquote>
<p>计算并生成trg文件</p>
</blockquote>
<p><img src="/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/fig6.png#pic_center"></p>
<h3 id="开始对接"><a href="#开始对接" class="headerlink" title="开始对接"></a>开始对接</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; adcp -t *.trg -s npisdvd -N <span class="number">100</span> -n <span class="number">2500000</span> -o prefixname -ref peptide_H.pdb</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-t 读取上一步生成的trg文件<br>-s 输入多肽序列，小写代表以loop形式对接，大写代表以螺旋形式对接<br>-N 代表进行独立构象搜索的次数<br>-n 每次构象搜索进行评分次数<br>-o 输出文件的前缀名<br>-ref 输出打分参照对比的初始结构文件</p>
</blockquote>
<blockquote>
<p>对接结束后，选择你觉得最合理的一种对接形式，进行下一步保留磷酸化修饰的对接。<br>将所选的最优构象多肽和受体蛋白同时用pymol打开，手动恢复原有磷酸化修饰的丝氨酸的磷酸化状态，删除氢原子，整体输出为一个pdb文件。<br>对输出的pdb文件用文本编辑器打开，保证受体蛋白处于A链，多肽属于B链。<br>确保磷酸修饰的丝氨酸的磷酸基团原子名称如下所示:<br><img src="/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/fig7.png#pic_center"></p>
</blockquote>
<h2 id="打开flexpepdock"><a href="#打开flexpepdock" class="headerlink" title="打开flexpepdock"></a>打开flexpepdock</h2><blockquote>
<p>这是一个在线服务器，是为数不多的支持含有非标准残基（仅限磷酸化的丝氨酸）的多肽对接程序</p>
</blockquote>
<p><a href="http://flexpepdock.furmanlab.cs.huji.ac.il/index.php"><font color="#0000FF">网页地址</font></a></p>
<p><img src="/2022/03/12/%E5%A4%9A%E8%82%BD%E5%AF%B9%E6%8E%A5/fig8.png#pic_center"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>多肽对接</tag>
      </tags>
  </entry>
  <entry>
    <title>用ccp4解析晶体结构</title>
    <url>/2022/02/22/ccp4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我自己的蛋白试了好多次根本不长晶体，也不知道自己为什么要学这玩意儿，反正看着官方demo不是多难，跟着做了一遍。步骤挺多的，所以想了想还是记录下来吧，兴许以后会用到呢？</p>
<span id="more"></span>
<p>本例使用的衍射数据及ccp4软件关注微信公众号‘grosetta’,后台回复ccp4自动获取。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="新建一个名为cd44的project"><a href="#新建一个名为cd44的project" class="headerlink" title="新建一个名为cd44的project"></a>新建一个名为cd44的project</h3><p><img src="/2022/02/22/ccp4/fig1.png#pic_center"></p>
<p>此时会自动打开名为cd44的project窗口</p>
<p><img src="/2022/02/22/ccp4/fig2.png#pic_center"></p>
<h2 id="索引与整合衍射数据"><a href="#索引与整合衍射数据" class="headerlink" title="索引与整合衍射数据"></a>索引与整合衍射数据</h2><p>运行iMosflm<br><img src="/2022/02/22/ccp4/fig3.png#pic_center"><br><img src="/2022/02/22/ccp4/fig4.png#pic_center"></p>
<p>之后会弹出iMosflm窗口，选择导入衍射图片</p>
<p><img src="/2022/02/22/ccp4/fig5.png#pic_center"><br>选择名为cd44_3_2_001.img,打开，程序会自动索引所有以cd44_3_2_开头的图片，并一同导入。<br><img src="/2022/02/22/ccp4/fig6.png#pic_center"><br>同时呈现第一张衍射图，粗略检查一下这些衍射图片，一般来讲，越靠后的图片衍射的越不好（衍射过程中晶体发生降解），再向后查阅过程中记录从第几张开始衍射效果明显下降的，要十分警惕来自这些衍射数据不好图片贡献的数据，查看完后就可以关闭返回cpp4i2项目界面了。<br><img src="/2022/02/22/ccp4/fig7.png#pic_center"><br><img src="/2022/02/22/ccp4/fig8.png#pic_center"></p>
<h2 id="运行-xia2-dials（处理数据并粗略看一下数据品质）"><a href="#运行-xia2-dials（处理数据并粗略看一下数据品质）" class="headerlink" title="运行 xia2 -dials（处理数据并粗略看一下数据品质）"></a>运行 xia2 -dials（处理数据并粗略看一下数据品质）</h2><p><img src="/2022/02/22/ccp4/fig9.png#pic_center"><br>点击运行后可能需要花费一些时间，耐心等待.<br>这里没有定义图片开始和结束，程序默认处理cd44_3_2_打头的所有图片.<br><img src="/2022/02/22/ccp4/fig10.png#pic_center"><br>如果想要查看处理的数据品质，在result一栏中下滑，看到如下图所示的图标，点击右上角的放大图标查看。<br><img src="/2022/02/22/ccp4/fig11.png#pic_center"><br>该图表是随机选取一半衍射图片数据的相关因子，纵坐标表示相关因子，横坐标表示分辨率。我们只需要关注途中绿线部分，相关因子远远小于1的时候表示挑选的用于数据处理的衍射图片不合理，该模块运算时当相关因子低于0.5时自动截断（此时不再读取后续的图片），如下图图表所示，该处理数据分辨率最高可达到1.8，分辨率2.3时会有较大误差（对应相关因子最小的时候）。从图中读取到这些信息后可以在上上张图片标识的高级参数设置板块中自定义读入图片区间，调整设定分辨率等，除此之外，相关因子cut off值也可以自定义（低于0.5），不过这样结果不是很准确，具体的还是要看个人怎么取舍了。<br><img src="/2022/02/22/ccp4/fig12.png#pic_center"><br>继续向下滑，可以看到Rmerge_batch图，横坐标是Rmerge,表示衍射数据在衍射图片中一致程度，该值越小越好，横坐标表示选取图片序号（我们前面图片默认导入了140张），下图所示Rmerge值在横坐标120以后显著上升，这部分数据一致性不好，大概率是衍射过程晶体降解引起的，我们可以重新运行此程序，将读入图片范围设置在1-120范围内。<br><img src="/2022/02/22/ccp4/fig13.png#pic_center"></p>
<h2 id="数据缩减（剔除掉不合理的数据）"><a href="#数据缩减（剔除掉不合理的数据）" class="headerlink" title="数据缩减（剔除掉不合理的数据）"></a>数据缩减（剔除掉不合理的数据）</h2><p><img src="/2022/02/22/ccp4/fig14.png#pic_center"><br><img src="/2022/02/22/ccp4/fig15.png#pic_center"></p>
<h2 id="用SHELXD确定重原子亚结构"><a href="#用SHELXD确定重原子亚结构" class="headerlink" title="用SHELXD确定重原子亚结构"></a>用SHELXD确定重原子亚结构</h2><p><img src="/2022/02/22/ccp4/fig16.png#pic_center"><br><img src="/2022/02/22/ccp4/fig17.png#pic_center"><br><img src="/2022/02/22/ccp4/fig18.png#pic_center"><br><img src="/2022/02/22/ccp4/fig19.png#pic_center"><br>运行<br><img src="/2022/02/22/ccp4/fig20.png#pic_center"><br>查看SHELX运行结果<br><img src="/2022/02/22/ccp4/fig21.png#pic_center"><br><img src="/2022/02/22/ccp4/fig22.png#pic_center"><br><img src="/2022/02/22/ccp4/fig23.png#pic_center"><br>在这之后会弹出一个识别的重原子（硒）的编辑窗口。<br>你会发现文件中的每个重原子参数都在这里:原子数,原子的名字,残基名称,序列号,x, y和z坐标,位置占有率,b因子和元素类型。<br>对于下表信息我们重点关注占有率一列，对于占有率急速降低的原子予以删除，这里虽然第二个原子与第一个原子相比占有率下降最为明显，但这可以忽略的（因为该程序会默认将占有率最高的原子设为占有率1，因此我们看到的1实际不一定有这么大），除此之外第五个原子和第四个原子相比降低明显，因此将5，6原子都删除（点击这一行原子，再点击上方剪刀即可删除）。<br><img src="/2022/02/22/ccp4/fig24.png#pic_center"><br><img src="/2022/02/22/ccp4/fig25.png#pic_center"><br>上一步完成后，点击File&gt;Exit退出</p>
<h2 id="使用PHASER计算相位"><a href="#使用PHASER计算相位" class="headerlink" title="使用PHASER计算相位"></a>使用PHASER计算相位</h2><p>使用PHASER程序是基于SHELXD找到的重原子位置计算衍射初始相位的。<br><img src="/2022/02/22/ccp4/fig26.png#pic_center"><br><img src="/2022/02/22/ccp4/fig27.png#pic_center"><br>查看结果<br><img src="/2022/02/22/ccp4/fig28.png#pic_center"></p>
<h2 id="使用PARROT进行密度修饰"><a href="#使用PARROT进行密度修饰" class="headerlink" title="使用PARROT进行密度修饰"></a>使用PARROT进行密度修饰</h2><p>我们预期有一个不对称单元中存在两个蛋白分子,所以尝试使用PARROT找到子结构中不对称的部分，在此基础上进行电子云密度修饰。<br><img src="/2022/02/22/ccp4/fig29.png#pic_center"><br><img src="/2022/02/22/ccp4/fig30.png#pic_center"><br><img src="/2022/02/22/ccp4/fig31.png#pic_center"><br>查看结果。FOM反应生成的电子云密度图品质，取值0-1，越大越好，一般大于0.7是比较好的。<br><img src="/2022/02/22/ccp4/fig32.png#pic_center"><br>到这一步衍射数据到电子云密度生成过程已经完成，可以点击上图中Export MTZ导出mtz格式的电子云密度图。<br>下面介绍这之后的两种建模方法：<br>分别是手动建模、Buccaneer自动建模。</p>
<h2 id="COOT手动建模"><a href="#COOT手动建模" class="headerlink" title="COOT手动建模"></a>COOT手动建模</h2><p>首先生成异常电子云密度图<br><img src="/2022/02/22/ccp4/fig33.png#pic_center"><br><img src="/2022/02/22/ccp4/fig34.png#pic_center"><br><img src="/2022/02/22/ccp4/fig35.png#pic_center"><br><img src="/2022/02/22/ccp4/fig36.png#pic_center"><br><img src="/2022/02/22/ccp4/fig37.png#pic_center"><br><img src="/2022/02/22/ccp4/fig38.png#pic_center"><br>上下滑动滑轮，调整map1的rmsd为1左右，map2 rmsd 为4左右<br><img src="/2022/02/22/ccp4/fig39.png#pic_center"><br><img src="/2022/02/22/ccp4/fig40.png#pic_center"><br>给map1中填塞骨架，然后就可以在此基础上进行手动精修<br><img src="/2022/02/22/ccp4/fig41.png#pic_center"><br><img src="/2022/02/22/ccp4/fig42.png#pic_center"><br><img src="/2022/02/22/ccp4/fig43.png#pic_center"></p>
<h2 id="使用Buccaneer进行自动建模"><a href="#使用Buccaneer进行自动建模" class="headerlink" title="使用Buccaneer进行自动建模"></a>使用Buccaneer进行自动建模</h2><p>该程序就是将之前输入的序列塞到电子云密度图中，找到并保存能塞进去残基数最多的情况。<br><img src="/2022/02/22/ccp4/fig44.png#pic_center"><br><img src="/2022/02/22/ccp4/fig45.png#pic_center"><br><img src="/2022/02/22/ccp4/fig46.png#pic_center"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>ccp4</tag>
        <tag>解析晶体结构</tag>
      </tags>
  </entry>
  <entry>
    <title>python脚本打包exe</title>
    <url>/2022/02/13/py2exe/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>python脚本打包，并为打包文件制作安装程序</p>
<span id="more"></span>

<h2 id="创建打包环境"><a href="#创建打包环境" class="headerlink" title="创建打包环境"></a>创建打包环境</h2><h3 id="安装pipenv"><a href="#安装pipenv" class="headerlink" title="安装pipenv"></a>安装pipenv</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; pip install pipenv</span><br></pre></td></tr></table></figure>

<h3 id="使用pipenv"><a href="#使用pipenv" class="headerlink" title="使用pipenv"></a>使用pipenv</h3><p>创建一个新文件夹env</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> env</span><br><span class="line">&gt; pipenv install --python <span class="number">3</span>.<span class="number">8</span>    #根据需要更改版本号</span><br><span class="line">&gt; pipenv install pyinstaller     #安装依赖的所有包,pyinstaller必装</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; pyinstaller --distpath Release/ -w -i fig.ico --clean test.py</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://blog.csdn.net/frostime/article/details/90523062">参考文章</a></p>
<h2 id="为程序包创建安装程序"><a href="#为程序包创建安装程序" class="headerlink" title="为程序包创建安装程序"></a>为程序包创建安装程序</h2><p>上一步打包好的程序是一个文件夹，这一步是给这个文件夹创建一个安装程序（类似于常规软件安装界面），方便给他人使用</p>
<h3 id="安装Setup-factory"><a href="#安装Setup-factory" class="headerlink" title="安装Setup factory"></a>安装Setup factory</h3><p><a href="https://pan.baidu.com/s/1YWOwNIkxrTPlWWes6PH4BA">链接</a> 关注文末公众号，后台回复’setup’获取提取码。</p>
<h3 id="使用Setup-factory"><a href="#使用Setup-factory" class="headerlink" title="使用Setup factory"></a>使用Setup factory</h3><p><img src="/2022/02/13/py2exe/fig1.png#pic_center"></p>
<p>按照下图输入必要信息</p>
<p><img src="/2022/02/13/py2exe/fig2.png#pic_center"></p>
<p>建议制作32位的，这样同时兼容32位和64位系统<br><img src="/2022/02/13/py2exe/fig3.png#pic_center"></p>
<p>路径选择刚才打包的程序文件夹<br><img src="/2022/02/13/py2exe/fig4.png#pic_center"></p>
<p>以下步骤按照图片提示信息操作，没有提示信息的默认下一步<br><img src="/2022/02/13/py2exe/fig5.png#pic_center"><br><img src="/2022/02/13/py2exe/fig6.png#pic_center"><br><img src="/2022/02/13/py2exe/fig7.png#pic_center"><br><img src="/2022/02/13/py2exe/fig8.png#pic_center"><br><img src="/2022/02/13/py2exe/fig9.png#pic_center"><br><img src="/2022/02/13/py2exe/fig10.png#pic_center"><br><img src="/2022/02/13/py2exe/fig11.png#pic_center"><br><img src="/2022/02/13/py2exe/fig12.png#pic_center"><br><img src="/2022/02/13/py2exe/fig13.png#pic_center"><br><img src="/2022/02/13/py2exe/fig14.png#pic_center"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>three_body有声书</title>
    <url>/2022/01/26/%E4%B8%89%E4%BD%93%E6%9C%89%E5%A3%B0%E4%B9%A6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="603060576c794d62dbb32492dd4da84f97c005bda64240dbd97e238f6dfe36e3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请在这里输入密码，回车确认</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>有声书</category>
      </categories>
      <tags>
        <tag>three_body</tag>
      </tags>
  </entry>
  <entry>
    <title>文件夹盘符映射</title>
    <url>/2022/01/21/%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9B%98%E7%AC%A6%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>对于一些路径较长且常用的文件夹可以将其映射到一个新的盘符，这样打开资源管理器就能直接看到</p>
<span id="more"></span>

<h2 id="复制要映射的路径"><a href="#复制要映射的路径" class="headerlink" title="复制要映射的路径"></a>复制要映射的路径</h2><p>比如我想要映射wsl所在路径，则拷贝: C:\Users\asus\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs</p>
<h2 id="映射盘符"><a href="#映射盘符" class="headerlink" title="映射盘符"></a>映射盘符</h2><p><img src="/2022/01/21/%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9B%98%E7%AC%A6%E6%98%A0%E5%B0%84/figure1.png#pic_center"></p>
<p>红框内输入要映射的文件夹路径<br>对于wsl也可以简化为\wsl$\Ubuntu-18.04</p>
<p><img src="/2022/01/21/%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9B%98%E7%AC%A6%E6%98%A0%E5%B0%84/figure2.png#pic_center"></p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/2022/01/21/%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9B%98%E7%AC%A6%E6%98%A0%E5%B0%84/figure3.png#pic_center"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>盘符映射</tag>
      </tags>
  </entry>
  <entry>
    <title>右键管理(右键获取当前路径下wsl对应路径)</title>
    <url>/2022/01/21/%E5%8F%B3%E9%94%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>以获取当前路径在wsl中对应路径为例</p>
<span id="more"></span>

<h2 id="制作路径转换脚本"><a href="#制作路径转换脚本" class="headerlink" title="制作路径转换脚本"></a>制作路径转换脚本</h2><p>创建一个新的名为path_converter.bat文件，用文本编辑器打开，写入如下内容:</p>
<blockquote>
<p>@echo off<br>set windows_path=%1</p>
<p>set wsl_path=%windows_path:=/%<br>set wsl_path=%wsl_path:c:/=/mnt/c/%<br>set wsl_path=%wsl_path:d:/=/mnt/d/%<br>set wsl_path=%wsl_path:e:/=/mnt/e/%<br>set wsl_path=%wsl_path:f:/=/mnt/f/%<br>::set wsl_path=%wsl_path:”=%<br>::echo %wsl_path%<br>:: echo %wsl_path% | clip<br>rem remove spaces and line breaks<br>echo | set /p=”%wsl_path%” | clip</p>
</blockquote>
<p>注意上一行的引号是英文条件下的引号，否则会报错</p>
<h2 id="安装右键管理软件"><a href="#安装右键管理软件" class="headerlink" title="安装右键管理软件"></a>安装右键管理软件</h2><p><a href="RightMenuMgr.zip"><font color="#DC143C">下载地址</font></a></p>
<p><img src="/2022/01/21/%E5%8F%B3%E9%94%AE%E7%AE%A1%E7%90%86/figure1.png#pic_center"></p>
<p>右击增添拓展项</p>
<blockquote>
<p>菜单名称:复制WSL路径到剪切板<br>执行命令:”D:\path_converter\path_converter.bat” “%1”<br><img src="/2022/01/21/%E5%8F%B3%E9%94%AE%E7%AE%A1%E7%90%86/figure2.png#pic_center"></p>
</blockquote>
<p>同样的操作在所有文件中重复一次<br><img src="/2022/01/21/%E5%8F%B3%E9%94%AE%E7%AE%A1%E7%90%86/figure3.png#pic_center"></p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/2022/01/21/%E5%8F%B3%E9%94%AE%E7%AE%A1%E7%90%86/figure4.png#pic_center"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>右键管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Subsystem for Linux(wsl)及带有gui的wsl</title>
    <url>/2022/01/21/win11_wsl/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>win11起开始支持带有图形化界面的wsl了，配置起来方便多了！</p>
<span id="more"></span>

<h2 id="升级到win11"><a href="#升级到win11" class="headerlink" title="升级到win11"></a>升级到win11</h2><p>想要接收win11更新推送前提要保证win10已经更新到21H2及以上版本。</p>
<p>此外win11对硬件有一定要求，安装微软提供的<a href="WindowsPCHealthCheckSetup.msi"><font color="#DC143C">检测工具</font></a>看你的设备够不够资格(双击默认安装)</p>
<h2 id="命令行安装wsl"><a href="#命令行安装wsl" class="headerlink" title="命令行安装wsl"></a>命令行安装wsl</h2><p>我的微软商店连不上，好在win11可以直接在cmd中安装</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; wsl --list --online     #查看有哪些可供安装的wsl发行版</span><br></pre></td></tr></table></figure>
<p><img src="/2022/01/21/win11_wsl/list.png#pic_center" alt="可供安装的wsl发行版"></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; wsl --install -d Ubuntu-<span class="number">18</span>.<span class="number">04</span>     #我选择安装ubuntu</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果安装完成后报下面的错误，则安装<a href="wsl_update_x64.msi"><font color="#DC143C">内核升级工具</font></a> (双击默认安装)<br>Installing, this may take a few minutes… WslRegisterDistribution<br>failed with error: 0x800701bc Error: 0x800701bc WSL 2 ???<br><a href="https://aka.ms/wsl2kernel">https://aka.ms/wsl2kernel</a></p>
<p>Press any key to continue…</p>
</blockquote>
<p>关闭已打开的wsl，重新开启报错消失，设置好用户名和密码。</p>
<h2 id="更新安装wsl-gui"><a href="#更新安装wsl-gui" class="headerlink" title="更新安装wsl-gui"></a>更新安装wsl-gui</h2><p>打开cmd</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; wsl --update    </span><br></pre></td></tr></table></figure>
<p>更新过后重启一次</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wsl --shutdown   #完全关闭wsl</span><br></pre></td></tr></table></figure>
<p>再开启wsl即可打开图形应用（试试装个gedit或者pymol看看）</p>
<h2 id="更换安装源"><a href="#更换安装源" class="headerlink" title="更换安装源"></a>更换安装源</h2><p>在wsl环境中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>添加以下内容:</p>
<blockquote>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted universe multiverse</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted universe multiverse</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted universe multiverse</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-proposed main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-proposed main restricted universe multiverse</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-backports main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-backports main restricted universe multiverse</p>
<p># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic main restricted universe multiverse<br># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic main restricted universe multiverse<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic-updates main restricted universe multiverse<br># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic-updates main restricted universe multiverse<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic-backports main restricted universe multiverse<br># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic-backports main restricted universe multiverse<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic-security main restricted universe multiverse<br># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic-security main restricted universe multiverse</p>
<p># 预发布软件源，不建议启用<br># deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic-proposed main restricted universe multiverse<br># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> bionic-proposed main restricted universe multiverse</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update    <span class="comment">#更新一下源</span></span><br></pre></td></tr></table></figure>

<h2 id="wsl常见问题"><a href="#wsl常见问题" class="headerlink" title="wsl常见问题"></a>wsl常见问题</h2><h3 id="查看此电脑上已经安装了哪几种linux发行版"><a href="#查看此电脑上已经安装了哪几种linux发行版" class="headerlink" title="查看此电脑上已经安装了哪几种linux发行版"></a>查看此电脑上已经安装了哪几种linux发行版</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; wsl -l</span><br></pre></td></tr></table></figure>

<h3 id="设置默认调用的wsl"><a href="#设置默认调用的wsl" class="headerlink" title="设置默认调用的wsl"></a>设置默认调用的wsl</h3><p>比如同时安装了kali和ubuntu或ubuntu不同版本，一般默认调用的是其中一种，下条命令可以更改默认发行版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wslconfig /setdefault Name    <span class="comment">#此处Name替换发行版名称（从wsl -l 中获取）</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>wsl</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Gromacs处理血红素</title>
    <url>/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>适用于对配位化合物的处理</p>
<span id="more"></span>
<h2 id="Atechamber做有机分子拓扑"><a href="#Atechamber做有机分子拓扑" class="headerlink" title="Atechamber做有机分子拓扑"></a>Atechamber做有机分子拓扑</h2><ul>
<li>用pymol从血红蛋白中保存出血红素分子为<a href="HEM.pdb"><font color="#DC143C">HEM.pdb</font></a>(加氢)</li>
<li>复制一份HEM.pdb为<a href="HEM_fix.pdb"><font color="#DC143C">HEM_fix.pdb</font></a>。用pymol打开HEM_fix.pdb,删除铁离子，另存为<a href="HEM_fix.mol2"><font color="#DC143C">HEM_fix.mol2</font></a>(原本的HEM.pdb千万保留)。</li>
<li>用文本编辑器打开HEM.pdb，找到铁离子所在的行，牢记其三维坐标:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.572  -13.621  5.453</span><br></pre></td></tr></table></figure>

<p><img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure1.png#pic_center"></p>
<ul>
<li>生成有机分子部分的拓扑</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python acpype.py -i HEM_fix.mol2</span><br></pre></td></tr></table></figure>

<p><img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure2.png#pic_center"></p>
<blockquote>
<p>这时工作路径下会出现一个HEM_fix.acpype的文件夹，在里面找到<a href="HEM_fix.acpype/HEM_fix_GMX.itp"><font color="#DC143C">HEM_fix_GMX.itp</font></a> 、<a href="HEM_fix.acpype/HEM_fix_GMX.gro"><font color="#DC143C">HEM_fix_GMX.gro</font></a>,<br>为了之后说明方便，分别改名为<a href="HEM.itp"><font color="#DC143C">HEM.itp</font></a> 、<a href="HEM.gro"><font color="#DC143C">HEM.gro</font></a>,并移动到上一级路径。</p>
</blockquote>
<p><img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure3.png#pic_center"></p>
<p><img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure4.png#pic_center"></p>
<ul>
<li>用文本编辑器打开HEM.gro,定位到最后一行，添加:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1   HEM     FE   77   0.357  -1.362   0.545</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>pdb坐标单位是A，gro文件坐标单位是<font color="#DC143C">nm</font>,所以pdb文件坐标就数值上是gro文件的<font color="#DC143C">10倍</font>。</strong><br><strong>对应坐标为0.357  -1.362   0.545</strong><br>此外在文件开始位置总原子数76改为77</p>
</blockquote>
<p><img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure5.png#pic_center"></p>
<p><img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure6.png#pic_center"></p>
<p>&nbsp;</p>
<h2 id="添加铁离子参数"><a href="#添加铁离子参数" class="headerlink" title="添加铁离子参数"></a>添加铁离子参数</h2><ul>
<li>查找铁离子参数</li>
</ul>
<blockquote>
<p>打开以下路径的文件（需要安装ambertools）:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$AMBERHOME/dat/leap/parm/frcmod.ions234lm_126_tip3p</span><br></pre></td></tr></table></figure>

<blockquote>
<p>找到三价铁离子所在的行:</p>
</blockquote>
<p><img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure7.png#pic_center"></p>
<blockquote>
<p>这两个参数分别是Rmin/2, ε<br>简单地说，Rmin表示两原子间能量最小的距离（单位A，即0.1nm），ε表示最小能量（单位时kal/mol）,二者满足以下关系式:</p>
</blockquote>
<center>
<img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure8.png" width="50%" height="50%">
</center>

<blockquote>
<p>但gromacs所用力场用的参数分别是 σ，ε,<br>σ表示两原子间能量最小的距离(单位为nm)，ε表示最小能量（单位时kJ/mol）。二者满足以下关系式：</p>
</blockquote>
<center>
<img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure9.png" width="50%" height="50%">
</center>

<blockquote>
<p>上述两式相等，简化为:</p>
</blockquote>
<p><img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure10.png#pic_center"></p>
<blockquote>
<p>带入公式计算(注意单位统一)结果为：<br><strong>（1kal/mol=4.186798kJ/mol）</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">σ=0.2469572=2.46957e-01(nm)</span><br><span class="line">ε=0.05681891=5.68189e-02(kJ/mol)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在拓扑文件[atomtypes]栏最后一行添加三价铁离子，除了上述计算的两个参数及原子名外，其余内容可以复制上一行。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ atomtypes ]</span><br><span class="line">;name   bond_type     mass     charge   ptype   sigma         epsilon       Amb</span><br><span class="line"> c3       c3          0.00000  0.00000   A     3.39967e-01   4.57730e-01 ; 1.91  0.1094</span><br><span class="line"> nc       nc          0.00000  0.00000   A     3.25000e-01   7.11280e-01 ; 1.82  0.1700</span><br><span class="line"> c        c           0.00000  0.00000   A     3.39967e-01   3.59824e-01 ; 1.91  0.0860</span><br><span class="line"> cf       cf          0.00000  0.00000   A     3.39967e-01   3.59824e-01 ; 1.91  0.0860</span><br><span class="line"> cc       cc          0.00000  0.00000   A     3.39967e-01   3.59824e-01 ; 1.91  0.0860</span><br><span class="line"> o        o           0.00000  0.00000   A     2.95992e-01   8.78640e-01 ; 1.66  0.2100</span><br><span class="line"> cd       cd          0.00000  0.00000   A     3.39967e-01   3.59824e-01 ; 1.91  0.0860</span><br><span class="line"> hc       hc          0.00000  0.00000   A     2.64953e-01   6.56888e-02 ; 1.49  0.0157</span><br><span class="line"> ha       ha          0.00000  0.00000   A     2.59964e-01   6.27600e-02 ; 1.46  0.0150</span><br><span class="line"> fe       fe          0.00000  0.00000   A     2.46957e-01   5.68189e-02 ;1.386  0.01357097</span><br><span class="line"> </span><br><span class="line"> [ moleculetype ]</span><br><span class="line">name            nrexcl</span><br><span class="line"> HEM_fix          3</span><br><span class="line"></span><br><span class="line">[ atoms ]</span><br><span class="line">。。。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>计算参数也可以登录**<a href="https://jerkwin.github.io/gmxtool/calc/calc.html"><font color="#0000FF">gmxtool</font></a>**在线计算</p>
</blockquote>
<ul>
<li>向拓扑中添加铁离子电荷</li>
</ul>
<blockquote>
<p>在[atoms]栏最后一行添加下面一行:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#序号 原子类型 分子序号 分子名称 原子名称（和gro文件保持一致） 电荷数  相对原子质量</span><br><span class="line">77   fe     1   HEM    FE   77     3.000000     55.85000 </span><br></pre></td></tr></table></figure>
<p>&nbsp;</p>
<h2 id="对铁离子进行约束"><a href="#对铁离子进行约束" class="headerlink" title="对铁离子进行约束"></a>对铁离子进行约束</h2><ul>
<li>添加铁离子限制条件（距离限制)</li>
</ul>
<blockquote>
<p>首先用vmd打开HEM.gro文件，确定和铁离子络合的四个氮原子在gro文件中的序号，再测出每一个氮原子到铁离子的距离。<br><strong>注意：这里测出的距离单位是A（即0.1nm）</strong></p>
</blockquote>
<center>
<img src="/2021/12/31/gromacs%E5%A4%84%E7%90%86%E8%A1%80%E7%BA%A2%E7%B4%A0/figure11.png" width="50%" height="50%">
</center>

<blockquote>
<p>在HEM.top文件[ bonds ]结束处, 添加一个新的栏目：[ constraints ], 添加如下内容:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ constraints ]</span><br><span class="line">77  5 2 0.20</span><br><span class="line">77 10 2 0.20</span><br><span class="line">77 42 2 0.20</span><br><span class="line">77 13 2 0.20 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>前两列表示两个原子的序号（gro文件中的）。<br>第三列可以选择是1或是2，简单地说，如果你觉得配位键和共价键更像一点，则选1；否则就选2。<br>二者没有绝对正确，如果后续模拟有异常，可以尝试改成另一个。<br>第四列表示限制两个原子的距离（单位是nm），因此我们前面测量个的原子距离需要除10。</p>
</blockquote>
<blockquote>
<p>至此，对血红素的处理大功告成，如果后续模拟过程中铁离子逃逸，可以尝试调整限制距离。<br>如果你想让血红素维持一个更加标准的平面构象，可以多加几个距离限制（如限制两两氮原子）。</p>
</blockquote>
<p>&nbsp;</p>
<h2 id="将血红素拓扑include到蛋白拓扑内"><a href="#将血红素拓扑include到蛋白拓扑内" class="headerlink" title="将血红素拓扑include到蛋白拓扑内"></a>将血红素拓扑include到蛋白拓扑内</h2><blockquote>
<p>以下是血红素单独在水环境下的拓扑示例：（注意include的顺序和位置极其容易出错，处理时要万分小心！！！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;amber99sb-ildn.ff/forcefield.itp&quot;   这是总力场（如果不加载总力场而只加载水分子或离子力场会报错）</span><br><span class="line">[ atomtypes ]</span><br><span class="line">;name   bond_type     mass     charge   ptype   sigma         epsilon       Amb</span><br><span class="line"> c3       c3          0.00000  0.00000   A     3.39967e-01   4.57730e-01 ; 1.91  0.1094</span><br><span class="line"> nc       nc          0.00000  0.00000   A     3.25000e-01   7.11280e-01 ; 1.82  0.1700</span><br><span class="line"> c        c           0.00000  0.00000   A     3.39967e-01   3.59824e-01 ; 1.91  0.0860</span><br><span class="line"> cf       cf          0.00000  0.00000   A     3.39967e-01   3.59824e-01 ; 1.91  0.0860</span><br><span class="line"> cc       cc          0.00000  0.00000   A     3.39967e-01   3.59824e-01 ; 1.91  0.0860</span><br><span class="line"> o        o           0.00000  0.00000   A     2.95992e-01   8.78640e-01 ; 1.66  0.2100</span><br><span class="line"> cd       cd          0.00000  0.00000   A     3.39967e-01   3.59824e-01 ; 1.91  0.0860</span><br><span class="line"> hc       hc          0.00000  0.00000   A     2.64953e-01   6.56888e-02 ; 1.49  0.0157</span><br><span class="line"> ha       ha          0.00000  0.00000   A     2.59964e-01   6.27600e-02 ; 1.46  0.0150</span><br><span class="line"> fe       fe          0.00000  0.00000   A     2.46957e-01   5.68189e-02 ; 1.386 0.0136 </span><br><span class="line"></span><br><span class="line">#include &quot;HEM.itp&quot;     #加载前面做好的血红素itp文件</span><br><span class="line">#include &quot;amber99sb-ildn.ff/tip3p.itp&quot; #加载水分子力场</span><br><span class="line">[ system ]</span><br><span class="line">HEM_fix in water</span><br><span class="line"></span><br><span class="line">[ molecules ]</span><br><span class="line">HEM_fix          1     </span><br><span class="line">SOL              1042</span><br></pre></td></tr></table></figure>

<p>&nbsp;<br><strong>关注微信公众号grosetta, 后台回复” <font color="#DC143C">HEM</font> “获取上文提到的所有文件。</strong></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>gromacs</tag>
        <tag>离子约束</tag>
        <tag>血红素</tag>
      </tags>
  </entry>
  <entry>
    <title>pymol常用命令_持续更新</title>
    <url>/2021/12/31/pymol%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4_%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>pymol日常高频使用场景及对应的commond line</p>
<span id="more"></span>

<ul>
<li><font color="#0000CD">设置球棍模型棍的粗细</font>  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; set stick_redius=0.25</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#0000CD">设置球直径的大小</font>  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; set sphere_scale=0.5</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#0000CD">将配体分子周围范围5A范围内的残基显示出来（sticks模型）</font>  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; show sticks, byres &lt;protein&gt; within 5 of &lt;ligand&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#0000CD">将配体分子周围范围5A范围内的残基显示出来（sticks模型）,并保存到pocket object中</font>  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; create pocket, byres &lt;protein&gt; within 5 of &lt;ligand&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#0000CD">制作动画</font>  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; mset 1 x30                 #定义一个30帧动画</span><br><span class="line">&gt;&gt; frame 1                    #定义第一帧</span><br><span class="line">&gt;&gt; #调整观察角度转到一个合适的角度</span><br><span class="line">&gt;&gt; mview store                #存储该视角为第一帧</span><br><span class="line">&gt;&gt; frame 30                   #定义第30帧</span><br><span class="line">&gt;&gt; #调整换个角度     </span><br><span class="line">&gt;&gt; mview reinterpolate        #让1到30帧平滑过渡</span><br><span class="line">&gt;&gt; mplay                      #预览效果</span><br><span class="line">&gt;&gt; set ray_trace_frames=1     #输出时渲染每一帧</span><br><span class="line">&gt;&gt; set cache_frames=1</span><br><span class="line">&gt;&gt; mpng mov                   #将每一帧输出为图片（输出路径和你打开的pdb所在路径一致）</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#0000CD">导入MD轨迹</font>  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; load filename.pdb, objectname     #导入初始构象pdb文件</span><br><span class="line">&gt;&gt; load_traj traj.xtc, objectname, start=1, stop=10001, interval=10</span><br><span class="line">&gt;&gt; save movie as movie.mpg           #保存为视频</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#0000CD">连接两个原子</font>  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; select object1, id 2518     #选择原子序号为2518的原子，并定义为object1</span><br><span class="line">&gt;&gt; select object2, id 1487     #选择原子序号为1487的原子，并定义为object2</span><br><span class="line">&gt;&gt; bond object1, object2       #连接两个object</span><br><span class="line">&gt;&gt; bond index 2518 index 1487  #直接通过索引两个原子的序号连接起来</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="center_of_mass.py"><font color="#0000CD">center_of_mass脚本使用</font></a>  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; import center_of_mass       #前提是将center_of_mass.py放到安装pymol所在python环境下的Lib文件夹内</span><br><span class="line">&gt;&gt; com sele,state=r1</span><br><span class="line">&gt;&gt; set sphere_scale,0.15</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>pymol</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell编程常用命令—持续更新</title>
    <url>/2021/12/31/shell_commond/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Shell编程常用命令，毕竟非科班出身，没必要非得全部记住，需要时能找出来用就行。</p>
<span id="more"></span>

<h2 id="Bash环境中的常用命令"><a href="#Bash环境中的常用命令" class="headerlink" title="Bash环境中的常用命令"></a>Bash环境中的常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="awk相关命令"><a href="#awk相关命令" class="headerlink" title="awk相关命令"></a>awk相关命令</h2><ul>
<li><font color="#0000CD">删除指定的列</font>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;&#123;$Num=&quot;&quot;; print $0&#125;&#x27;</span> filename</span><br></pre></td></tr></table></figure>

<h2 id="sed相关命令"><a href="#sed相关命令" class="headerlink" title="sed相关命令"></a>sed相关命令</h2><ul>
<li><font color="#0000CD">删除含某些关键字的行</font>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&#x27;/关键字符/d&#x27;</span> filename </span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#0000CD">在每行开始添加内容</font>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&quot;s/^/HEAD&amp;/g&quot;</span> test.file</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#0000CD">在每行结尾添加内容</font>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&quot;s/$/&amp;TAIL/g&quot;</span> test.file</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>293细胞培养</title>
    <url>/2021/12/31/293cell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在做293细胞给药检测荧光变化的实验，以往只做过昆虫悬浮细胞培养，第一次接触贴壁细胞说实话内心还是有些犯怵的。<br>结合在网上搜刮到的一些资料和近几天实操结果记录一下心得体会。</p>
<span id="more"></span>
<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="需要用到的试剂器材"><a href="#需要用到的试剂器材" class="headerlink" title="需要用到的试剂器材"></a>需要用到的试剂器材</h3><blockquote>
<ul>
<li>含10%胎牛血清（FBS）和1%PS的DMEM完全培养基（提前用50ml离心管分装）  </li>
<li>0.25%胰蛋白酶</li>
<li>PBS缓冲液</li>
<li>移液管</li>
<li>10cm培养皿</li>
</ul>
</blockquote>
<h2 id="复苏"><a href="#复苏" class="headerlink" title="复苏"></a>复苏</h2><blockquote>
<p>这一步和复苏昆虫细胞一致。注意点无非是冻存的细胞拿到37度水浴锅的速度要快（尽快度过-4℃到4℃这个危险温度范围）；<br>另外培养基提前预热；细胞在还有一点团块时从水浴锅中取出，利用余热将剩余的溶解。</p>
</blockquote>
<h2 id="传代"><a href="#传代" class="headerlink" title="传代"></a>传代</h2><blockquote>
<p>这一步在一开始接触时很容易手忙脚乱。做过两次就好了。</p>
<ul>
<li>传代前先观察看细胞长的密度（大概估算一下,如果两两细胞之间的空隙普遍能再塞下一个细胞，细胞密度50%，若只能塞下半个细胞则密度约为75%），一般大于90%或长满再传<br>如果细胞培养基发黄了，立即更换培养基（没长满或密度低只要换上清不用传）</li>
<li>确定可以传代了，则吸出上清，尽快沿壁加入5ml PBS ，由于293贴壁性较差，最好不要吹打，稍微晃一晃培养皿就好了，然后吸去PBS。相同的操作进行两次</li>
<li>吸取1-2ml 0.25%胰蛋白酶均匀加到培养皿中。（我10cm的皿加1ml）常温下消化1-2min</li>
<li>吸取5-6ml完全培养基加入到培养皿中（用以终止胰蛋白酶消化）。反复吹打，把壁上的细胞都吹下来。</li>
<li>吸取上一步吹打下来的细胞悬液到15ml离心管中，1000r离心2.5min.</li>
<li>直接倒掉上清，利用残留的一点上清悬起细胞（收轻轻敲打离心管，如果实在敲不下来那就等下一步加培养基稀释时用吸管吹吧）</li>
<li>将细胞悬起之后记下数，尽量维持在1*10e6个/ml。浓了再加点培养基稀释。</li>
<li>取新的皿，向其中加入8ml完全培养基。取上一步细胞悬液2ml加进去。吸管吹打几遍让细胞混匀。</li>
<li>放进培养箱24h之后观察。</li>
</ul>
</blockquote>
<h2 id="冻存"><a href="#冻存" class="headerlink" title="冻存"></a>冻存</h2><blockquote>
<ul>
<li>前7步和传代一样，接下来用1ml含10%DMSO的完全培养基重悬；</li>
<li>转移到冻存盒，-80℃存放72小时；</li>
<li>转移到液氮罐长存。</li>
</ul>
</blockquote>
<h2 id="转染"><a href="#转染" class="headerlink" title="转染"></a>转染</h2><blockquote>
<ul>
<li>5ml不含双抗、不含胎牛血清的DMEM加入10微克DNA，室温下放置5min;</li>
<li>5ml不含双抗、不含胎牛血清的DMEM加入2~3倍质量的PEI（别问我为什么用这个，问就是这个最便宜，hhh），室温孵育5min;</li>
<li>含PEI的DMEM加入到含DNA的DMEM中，室温孵育15-20min;(顺序千万不能弄错)；</li>
<li>加入到细胞密度大于75%的培养皿中（原有的培养基已经移除），等待4-6h，更换新鲜含双抗的完全培养基继续培养36-48h(中间视情况选择是否更换培养基)。</li>
</ul>
<p>像293这种容易转染的细胞第四步4h足够了，因为PEI这玩意儿还是很毒的，能少存在一会儿最好。<br>此外在有PEI存在培养基的情况下万不可添加抗生素，看网上说PEI改变细胞膜通透性，抗生素若存在的话进入细胞中影响细胞生长。  </p>
</blockquote>
<p>相关帖子：<a href="https://zhuanlan.zhihu.com/p/163109490"><font color="#0000FF">知乎:293protocal</font></a> 、 <a href="https://www.biomart.cn/experiment/review/92.htm"><font color="#0000FF">丁香园:PEI转染</font></a></p>
]]></content>
      <categories>
        <category>实验相关</category>
      </categories>
      <tags>
        <tag>293</tag>
        <tag>贴壁细胞</tag>
      </tags>
  </entry>
  <entry>
    <title>PDB文件格式解读</title>
    <url>/2021/12/31/pdb_format/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>description: pdb文件格式要求比较严格，做到知己知彼方能应对各种bug。</p>
<span id="more"></span>
<p>pdb文件下载地址<a href="https://www1.rcsb.org/"><font color="#0000FF">RCSB</font></a></p>
<h2 id="格式示例"><a href="#格式示例" class="headerlink" title="格式示例"></a>格式示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#标题部分  </span><br><span class="line">HEADER #分子类型，结构公布日期，ID号             </span><br><span class="line">TITLE  #哪个大分子，分辨率是多少             </span><br><span class="line">COMPND #整个文件中包含哪些分子类型：蛋白、核酸、水、抗衡离子                                                            </span><br><span class="line">SOURCE #以上分子的来源                                                            </span><br><span class="line">KEYWDS #关键词                                                   </span><br><span class="line">EXPDTA #获取结构所用的方法：X-ray/NMR/冷冻电镜                                                    </span><br><span class="line">AUTHOR #结构测定者                                       </span><br><span class="line">REVDAT #修订日期                                                                                  </span><br><span class="line">JRNL   #文章发表的期刊/DOI号等信息                                                              </span><br><span class="line">REMARK #各种杂七杂八的信息，日常基本用不到                                                                                             </span><br><span class="line">#一级结构信息</span><br><span class="line">DBREF  #其他数据库的相关记录            </span><br><span class="line">SEQRES #序列信息</span><br><span class="line">#杂项</span><br><span class="line">HETATM #非标准残基名称</span><br><span class="line">FORMUL #非标准残基的化学式                                                     </span><br><span class="line">#二级结构</span><br><span class="line">HELIX  #α螺旋   </span><br><span class="line">SHEET  #β折叠                                                                               </span><br><span class="line">TURN  #转角</span><br><span class="line">#连接信息注释</span><br><span class="line">SSBOND #二硫键</span><br><span class="line">HYDBND #氢键</span><br><span class="line">SLTBRG #盐桥</span><br><span class="line">#晶胞参数</span><br><span class="line">CRYST1   #晶胞参数，一般只有x-ray测得的结构才有这一项</span><br><span class="line">ORIGX1   #直角-PDB坐标                                             </span><br><span class="line">SCALE1   #直角-晶体分数坐标。给出数据中直角坐标向晶体分数坐标的变换因子                         </span><br><span class="line"></span><br><span class="line">#坐标（核心部分）</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">#1-6 左对齐 ATOM/HETATM</span><br><span class="line">#7-11右对齐 原子序号</span><br><span class="line">#13-16左对齐 原子名称</span><br><span class="line">#18-20       残基名称</span><br><span class="line">#22          链名</span><br><span class="line">#23-26       残基序号</span><br><span class="line">#31-38右对齐  x坐标值（单位为A°）</span><br><span class="line">#39-46右对齐  y坐标值</span><br><span class="line">#47-54右对齐  z坐标值</span><br><span class="line">#55-60右对齐  占有率（这个数值可以是0-1间任意一个数，数字为1表示原子坐标就在这里，0表示原子不在这里，在这之间表示原子可能在这里，越接近0表示可能性就越小）</span><br><span class="line">#61-66右对齐  温度因子（描述了电子密度的弥散程度） #77-78右对齐  元素符号 </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------    </span><br><span class="line">ATOM    594  N   GLY A  75      41.165  35.531  31.898  1 36.31           N  </span><br><span class="line">ATOM    595  CA  GLY A  75      41.845  36.550  32.686  1 36.07           C  </span><br><span class="line">ATOM    596  C   GLY A  75      41.251  37.941  32.588  1 36.16           C  </span><br><span class="line">ATOM    597  O   GLY A  75      41.102  38.523  31.500  1 36.26           O  </span><br><span class="line">ATOM    598  N   GLY A  76      40.946  38.472  33.757  1 36.05           N  </span><br><span class="line">ATOM    599  CA  GLY A  76      40.373  39.813  33.944  1 36.19           C  </span><br><span class="line">ATOM    600  C   GLY A  76      40.031  39.992  35.432  1 36.20           C  </span><br><span class="line">ATOM    601  O   GLY A  76      38.933  40.525  35.687  1 36.13           O  </span><br><span class="line">ATOM    602  OXT GLY A  76      40.862  39.575  36.251  1 36.27           O  </span><br><span class="line">TER     603      GLY A  76  </span><br><span class="line">#TER表示一条链的结束                                                    </span><br><span class="line">HETATM  604  O   HOH A  77      45.747  30.081  19.708  1 12.43           O  </span><br><span class="line">HETATM  605  O   HOH A  78      19.168  31.868  17.050  1 12.65           O  </span><br><span class="line"></span><br><span class="line">CONECT  #原子间连接信息</span><br><span class="line">MASTER  #版权所有者     </span><br><span class="line">END     #标志整个文件结束  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="遇到过的恶心事"><a href="#遇到过的恶心事" class="headerlink" title="遇到过的恶心事"></a>遇到过的恶心事</h2><blockquote>
<p>此外，对于有两条链的PDB文件，即便用TER作为结尾注释，链与链之间的原子序号如果接近的话，用pymol打开还是会有一条很长的虚线连接（就像下图显示的那样），甚是讨厌。这是由于pymol的默认设定导致的，但linux端的pymol无此现象。解决办法：将其中一条链的原子序号同时加300或400，目的是离另外一条链远远的，这要借助excel或notepad++完成。</p>
</blockquote>
<p><img src="/2021/12/31/pdb_format/pdb.png#pic_center"></p>
]]></content>
      <categories>
        <category>计算机相关</category>
      </categories>
      <tags>
        <tag>pdb</tag>
        <tag>文件格式</tag>
      </tags>
  </entry>
</search>
